import React, { useState } from "react";
import styles from "./EditCatalogPage.module.css";

// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—É–∫–µ—Ç–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤
const initialBouquets = [
  { id: 1, name: "–ë—É–∫–µ—Ç —Ä–æ–∑", price: 2000, description: "–ö—Ä–∞—Å–Ω—ã–µ —Ä–æ–∑—ã, 15 —à—Ç—É–∫" },
  { id: 2, name: "–ë—É–∫–µ—Ç —Ç—é–ª—å–ø–∞–Ω–æ–≤", price: 1500, description: "–ñ–µ–ª—Ç—ã–µ —Ç—é–ª—å–ø–∞–Ω—ã, 10 —à—Ç—É–∫" },
];

const initialFlowers = [
  { id: 1, name: "–†–æ–∑–∞", price: 100, description: "–ö—Ä–∞—Å–Ω–∞—è —Ä–æ–∑–∞" },
  { id: 2, name: "–¢—é–ª—å–ø–∞–Ω", price: 80, description: "–ñ–µ–ª—Ç—ã–π —Ç—é–ª—å–ø–∞–Ω" },
];

const EditCatalogPage = () => {
  const [bouquets, setBouquets] = useState(initialBouquets);
  const [flowers, setFlowers] = useState(initialFlowers);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isAdding, setIsAdding] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    price: "",
    description: "",
  });

  // –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const openForm = (product = null) => {
    setSelectedProduct(product);
    setIsEditing(!!product);
    setIsAdding(!product);
    setFormData(
      product
        ? { name: product.name, price: product.price, description: product.description }
        : { name: "", price: "", description: "" }
    );
  };

  // –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
  const closeForm = () => {
    setSelectedProduct(null);
    setIsEditing(false);
    setIsAdding(false);
    setFormData({ name: "", price: "", description: "" });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
  const handleSave = () => {
    if (isAdding) {
      const newProduct = { id: Date.now(), ...formData };
      if (selectedProduct?.type === "bouquet") {
        setBouquets([...bouquets, newProduct]);
      } else {
        setFlowers([...flowers, newProduct]);
      }
    } else if (isEditing) {
      const updatedProduct = { ...selectedProduct, ...formData };
      if (selectedProduct.type === "bouquet") {
        setBouquets(bouquets.map((p) => (p.id === updatedProduct.id ? updatedProduct : p)));
      } else {
        setFlowers(flowers.map((p) => (p.id === updatedProduct.id ? updatedProduct : p)));
      }
    }
    closeForm();
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  const handleDelete = (product) => {
    if (product.type === "bouquet") {
      setBouquets(bouquets.filter((p) => p.id !== product.id));
    } else {
      setFlowers(flowers.filter((p) => p.id !== product.id));
    }
  };

  return (
    <div className={styles.container}>
      <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞</h2>

      {/* –°–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ */}
      <div className={styles.section}>
        <h3>–ë—É–∫–µ—Ç—ã</h3>
        <button className={styles.addButton} onClick={() => openForm()}>
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç
        </button>
        <div className={styles.productList}>
          {bouquets.map((bouquet) => (
            <div key={bouquet.id} className={styles.productCard}>
              <h4>{bouquet.name}</h4>
              <p>{bouquet.description}</p>
              <p>–¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.</p>
              <div className={styles.buttons}>
                <button className={styles.editButton} onClick={() => openForm({ ...bouquet, type: "bouquet" })}>
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button className={styles.deleteButton} onClick={() => handleDelete({ ...bouquet, type: "bouquet" })}>
                  üóë –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ */}
      <div className={styles.section}>
        <h3>–¶–≤–µ—Ç—ã</h3>
        <button className={styles.addButton} onClick={() => openForm()}>
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–∫
        </button>
        <div className={styles.productList}>
          {flowers.map((flower) => (
            <div key={flower.id} className={styles.productCard}>
              <h4>{flower.name}</h4>
              <p>{flower.description}</p>
              <p>–¶–µ–Ω–∞: {flower.price} —Ä—É–±.</p>
              <div className={styles.buttons}>
                <button className={styles.editButton} onClick={() => openForm({ ...flower, type: "flower" })}>
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button className={styles.deleteButton} onClick={() => handleDelete({ ...flower, type: "flower" })}>
                  üóë –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {(isEditing || isAdding) && (
        <div className={styles.modalOverlay}>
          <div className={styles.modal}>
            <h3>{isEditing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" : "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"}</h3>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
              className={styles.input}
            />
            <input
              type="number"
              name="price"
              value={formData.price}
              onChange={handleInputChange}
              placeholder="–¶–µ–Ω–∞"
              className={styles.input}
            />
            <textarea
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
              className={styles.textarea}
            />
            <div className={styles.modalButtons}>
              <button className={styles.saveButton} onClick={handleSave}>
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
              <button className={styles.cancelButton} onClick={closeForm}>
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EditCatalogPage;